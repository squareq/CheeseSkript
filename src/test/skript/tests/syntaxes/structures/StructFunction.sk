function {@function}) :: boolean:
	return true

options:
	function: foo(

function local() :: number:
	return 1

local function local() :: number:
	return 2

local function bar() :: boolean:
	return true

local function _blob() :: string:
	return "blub"

test "functions":
	assert foo() is true with "function return type failed"
	assert local() is not 1 with "global function parsed before local function"
	assert bar() is true with "local function didn't execute correctly"
	assert _blob() is "blub" with "function that starts with underscore didn't execute correctly"

using local variable type hints

parse:
	results: {StructFunction::hints::1::*}
	code:
		function hint_test_1(x: number):
			set {_a} to {_x} in lowercase

parse:
	results: {StructFunction::hints::2::*}
	code:
		function hint_test_2(x: numbers):
			set {_a::*} to {_x::*} in lowercase

local function type_hint_argument_test(number: number):
	stop

test "function structure type hints":
	assert {StructFunction::hints::1::*} is "Expected variable '{_x}' to be a text, but it is a number" with "Hint failed (%{StructFunction::hints::1::*}%)"
	assert {StructFunction::hints::2::*} is "Expected variable '{_x::*}' to be a text, but it is a number" with "Hint failed (%{StructFunction::hints::2::*}%)"
	set {_number} to true
	parse:
		type_hint_argument_test({_number})
	assert the first element of the last parse logs is set # contains "The function 'type_hint_argument_test(boolean)' does not exist." (NEEDS FIXING)

local function list_argument_single_default(x: texts="hey") :: texts:
    return {_x::*}

test "function list argument with a single default":
	assert list_argument_single_default() = "hey"

local function literal_test(x: entity type):
	stop
local function literal_test_projectile(x: entity):
	stop

test "literal type parsing":
	parse:
		literal_test(firework)
	assert last parse logs is not set

	spawn an arrow at test-location:
		set {_entity} to entity
		parse:
			literal_test_projectile(projectile)
	assert last parse logs are not set
	clear entity within {_entity}
