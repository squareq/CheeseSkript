test "SecConditional - ParseIf":
	parse if plugin "LaDeDa-LeFakePlugin" is enabled:
		#this code in this section should NOT be parsed
		floopidy flopidy flernindurf
		assert 10 = 1 with "ParseIf section was parsed and failed"

	else parse if plugin "Skript" is enabled:
		#this code in this should SHOULD be parsed
		set {_a} to 10 # I mean.. what else do you put here, amirite?

	else:
		#this code in this section SHOULD be parsed but should NOT be ran
		assert 10 = 1 with "ParseIf/Else section was parsed and failed"

test "SecConditional":
	set {_b} to true
	if 1 is 1:
		delete {_b}
		1 = 2
	else if 1 = 1:
		assert 1 = 2 with "conditional failed"
	else:
		assert 1 = 2 with "conditional failed"
	if {_b} is set:
		assert 1 = 2 with "conditional failed"

	if 1 = 2:
		assert 1 = 2 with "conditional failed"
	else if 1 = 1:
		exit 1 section
	else:
		assert 1 = 2 with "conditional failed"

test "SecConditional - if all true":
	if:
		1 is 1
		2 is 2
	then:
		set {_a} to true
	assert {_a} is set with "if all did not run"

test "SecConditional - if all false":
	if:
		1 is 1
		2 is 1
	then:
		set {_a} to true
	assert {_a} is not set with "if all ran when conditions were false"

test "SecConditional - if any true":
	if any:
		1 is 3
		2 is 2
	then:
		set {_a} to true
	assert {_a} is set with "if any did not run when at least one condition was true"

test "SecConditional - if any false":
	if any:
		1 is 3
		2 is 7
	then:
		set {_a} to true
	assert {_a} is not set with "if any ran when no condition was true"


test "SecConditional - if any else":
	if any:
		1 is 3
		2 is 7
	then:
		set {_a} to true
	else:
		set {_a} to false
	assert {_a} is false with "if any did not run else when no condition was true"

test "SecConditional - if all else":
	if all:
		1 is 3
		2 is 7
	then:
		set {_a} to true
	else:
		set {_a} to false
	assert {_a} is false with "if all did not run else when at least one condition was false"

test "SecConditional - if all by default":
	if:
		1 is 2
		2 is 7
	then:
		set {_a} to true
	assert {_a} is not set with "bare 'if' did not require all conditions to be true"

test "SecConditional - else if all true":
	if:
		1 is 2
		2 is 7
	then:
		set {_a} to true
	else if:
		1 is 1
		2 is 2
	then:
		set {_a} to false
	assert {_a} is false with "'else if all' did not run when preceding 'if' was false and conditions were true"

test "SecConditional - else if any true":
	if:
		1 is 2
		2 is 7
	then:
		set {_a} to true
	else if any:
		1 is 1
		2 is 7
	then:
		set {_a} to false
	assert {_a} is false with "'else if any' did not run when preceding 'if' was false and at least one condition was true"

test "SecConditional - else if any false":
	if:
		1 is 2
		2 is 7
	then:
		set {_b} to true
	else if any:
		1 is 8
		2 is 7
	then:
		set {_a} to false
	assert {_a} is not set with "'else if any' ran even though all conditions were false"

test "SecConditional - else if all false":
	if:
		1 is 2
		2 is 7
	then:
		set {_b} to true
	else if:
		1 is 8
		2 is 7
	then:
		set {_a} to false
	assert {_a} is not set with "'else if all' ran even though all conditions were false"

test "SecConditional - starting with a non-multiline conditional":
	if 1 is 1:
		set {_a} to true
	else if:
		1 is 8
		2 is 7
	then:
		set {_b} to true
	assert {_a} is set with "non-multiline 'if' didn't run when before a multiline 'else if'"

test "SecConditional - non-multiline conditional in the middle":
	if:
		1 is 2
		3 is 4
	then:
		set {_b} to true
	else if 1 is 1:
		set {_a} to true
	else if:
		5 is 6
		7 is 8
	then:
		set {_c} to true
	assert {_a} is set with "non-multiline 'if' didn't run when used in the middle of a multiline 'else if'"

test "SecConditional - non-multiline conditional at the end":
	if:
		1 is 2
		3 is 4
	then:
		set {_b} to true
	else if 1 is 1:
		set {_a} to true
	assert {_a} is set with "non-multiline 'if' didn't run used at the end of a multiline 'if'"

test "SecConditional - delay logic 1":
	assert has delay before is false with "should not have delay at start of test"

	parse:
		if true is true:
			stop
		else:
			stop
	assert last parse logs is not set
	assert has delay before is false with "all branches having no delay should not cause a delay"

	parse:
		if true is true:
			stop
		else:
			wait 1 second
	assert last parse logs is not set
	assert has delay before is unknown with "only some branches having a delay should cause an unknown delay"

	parse:
		if true is true:
			wait 1 second
		else if:
			true is true
			true is true
		then:
			wait 1 second
		else:
			wait 1 second
	assert unsafely last parse logs is not set
	assert unsafely has delay before is true with "all branches having a delay with an else should cause a delay"

	parse:
		if:
			true is true
			true is true
		then:
			stop
		else if:
			true is true
			true is true
		then:
			stop
	assert unsafely last parse logs is not set
	assert unsafely has delay before is true with "all branches having no delay should not change an already delayed trigger"

test "SecConditional - delay logic 2":
	# separated to ensure no interference from prior tests
	parse:
		if true is true:
			wait 1 second
		else if:
			true is true
			true is true
		then:
			wait 1 second
	assert last parse logs is not set
	assert has delay before is unknown with "all branches having a delay without an else should cause an unknown delay"

test "SecConditional - delay logic 3":
	# separated to ensure no interference from prior tests
	parse:
		if true is true:
			wait 1 second
		else if has delay before is false failing if wrong:
			stop
	assert last parse logs is not set with "delay state between branches is not reset"

test "SecConditional - delay logic 4":
	# separated to ensure no interference from prior tests
	parse:
		if true is true:
			wait 1 second
		else if:
			true is true
			has delay before is false failing if wrong
		then:
			stop
	assert last parse logs is not set with "delay state between branches is not reset"
