test "where filter":
	set {_list::*} to "foo", "bar" and "foobar"
	assert first element of ({_list::*} where [string input is "foo"]) is "foo" with "ExprFilter filtered incorrectly"
	assert {_list::*} where [number input is set] is not set with "ExprFilter provided input value when classinfo did not match"
	assert first element of ({_list::*} where [input is "foo"]) is "foo" with "ExprFilter filtered object input incorrectly"
	assert first element of ({_list::*} where [input is "bar"]) is "bar" with "ExprFilter filtered object input incorrectly"
	assert size of ({_list::*} where [input is "bar"]) is 1 with "ExprFilter filtered object input incorrectly"
	assert first element of ({_list::*} where [input is "bar"]) is "bar" with "ExprFilter filtered object input incorrectly"
	assert size of ({_list::*} where [input is "bar"]) is 1 with "ExprFilter filtered object input incorrectly"
	assert first element of ({_list::*} where [input is "foobar"]) is "foobar" with "ExprFilter filtered object input incorrectly"
	assert size of ({_list::*} where [input is "foobar"]) is 1 with "ExprFilter filtered object input incorrectly"
	assert size of ({_list::*} where [input is "foo" or "bar"]) is 2 with "ExprFilter filtered object input incorrectly"
	assert size of ({_list::*} where [input is set]) is 3 with "ExprFilter filtered object input incorrectly"
	assert {_list::*} where [false is true] is not set with "ExprFilter returned objects with false condition"
	assert ({_list::*} where [input is (("foo" and "bar") where [input is "bar"])]) is "bar" with "Failed filter with filter within condition"
	assert (({_list::*} where [input is "foo"]) where [input is "foo"]) is "foo" with "Failed chained filters"
	assert {_list::*} where [input index is "2" or "3"] is "bar" and "foobar" with "Failed input index filter"

test "input conversion":
	set {_strings::*} to "test1", "test2", "test3" and "4test"
	assert size of ({_strings::*} where [the first 4 characters of string input is "test"]) is 3 with "input was not correctly casted"
	assert size of ({_strings::*} where [the last string color of string input is not set]) is 0 with "input was not correctly casted"
